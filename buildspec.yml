version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
  pre_build:
    commands:
      - echo "Fetching SSH Key..."
      - aws secretsmanager get-secret-value --secret-id MyServerSSHKey_3 --query SecretString --output text > key.pem
      - sed -i 's/\\n/\n/g' key.pem
      - chmod 400 key.pem
      - export PIPELINE_START=$(date +%s)

  build:
    commands:
      - echo "Building Application..."
      - mkdir -p build/WEB-INF/classes
      # Compile with strict error handling
      - javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java") 2> compile.log || { echo "🛑 Compilation failed"; exit 1; }
      - cp -R src/main/resources/* build/WEB-INF/classes/
      - cp -R src/main/webapp/* build/
      # Create WAR with validation
      - jar -cvf JobManagement_CODEBUILD.war -C build . || { echo "🛑 WAR creation failed"; exit 1; }
      # Create validated backup
      - mkdir -p /tmp/build_artifacts
      - cp JobManagement_CODEBUILD.war /tmp/build_artifacts/JobManagement_CODEBUILD.war_bak

  post_build:
    commands:
      - |
        # Single execution block for atomic deployment
        echo "Starting post-build operations..."
        
        # Validate build artifacts first
        if [ ! -f JobManagement_CODEBUILD.war ]; then
          echo "🔥 Critical error: Missing WAR file!"
          echo "Compilation errors:"
          cat compile.log
          exit 1
        fi

        # Resource metrics - before
        echo "📊 Capturing pre-deployment metrics..."
        vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > metrics_before.log
        free -h > mem_before.log

        # Deployment timing
        export DEPLOY_START=$(date +%s)
        export LEAD_TIME=$((DEPLOY_START - $(git log -1 --format=%ct)))

        # Deployment execution
        echo "🚀 Deploying application..."
        if scp -o StrictHostKeyChecking=no -i key.pem JobManagement_CODEBUILD.war ubuntu@40.192.68.176:/opt/tomcat10/webapps/; then
          echo "🔧 Restarting Tomcat..."
          ssh -i key.pem ubuntu@40.192.68.176 <<EOF
            sudo rm -rf /opt/tomcat10/webapps/JobManagement_CODEBUILD
            sudo /opt/tomcat10/bin/shutdown.sh || true
            sudo /opt/tomcat10/bin/startup.sh
          EOF
        else
          echo "🔄 Initiating rollback..."
          export ROLLBACK_START=$(date +%s)
          scp -i key.pem /tmp/build_artifacts/JobManagement_CODEBUILD.war_bak ubuntu@40.192.68.176:/opt/tomcat10/webapps/JobManagement_CODEBUILD.war
          ssh -i key.pem ubuntu@40.192.68.176 <<EOF
            sudo rm -rf /opt/tomcat10/webapps/JobManagement_CODEBUILD
            sudo /opt/tomcat10/bin/shutdown.sh || true
            sudo /opt/tomcat10/bin/startup.sh
          EOF
          export ROLLBACK_DURATION=$(( $(date +%s) - ROLLBACK_START ))
          echo "⏱️ Rollback duration: $ROLLBACK_DURATION seconds"
          exit 1
        fi

        # Post-deployment metrics
        echo "📈 Capturing post-deployment metrics..."
        vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > metrics_after.log
        free -h > mem_after.log

        # Final calculations
        export PIPELINE_END=$(date +%s)
        export TOTAL_DURATION=$((PIPELINE_END - PIPELINE_START))
        export DEPLOY_DURATION=$(( $(date +%s) - DEPLOY_START ))

        # Generate report
        echo "📄 Generating metrics summary..."
        printf "\n\nCI/CD METRICS SUMMARY:\n"
        printf "%-30s %s\n" "Total Pipeline Duration:" "$TOTAL_DURATION seconds"
        printf "%-30s %s\n" "Deployment Time:" "$DEPLOY_DURATION seconds"
        printf "%-30s %s\n" "Lead Time for Changes:" "$LEAD_TIME seconds"
        [ -n "$ROLLBACK_DURATION" ] && printf "%-30s %s\n" "Rollback Duration:" "$ROLLBACK_DURATION seconds"
        printf "\nResource Usage:\n"
        paste <(cat metrics_before.log) <(cat metrics_after.log) | column -t -s $'\t'

artifacts:
  files:
    - JobManagement_CODEBUILD.war
    - compile.log
    - metrics_before.log
    - metrics_after.log
    - mem_before.log
    - mem_after.log