version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
  pre_build:
    commands:
      - echo "Fetching SSH Key from AWS Secrets Manager..."
      - aws secretsmanager get-secret-value --secret-id MyServerSSHKey_3 --query SecretString --output text > key.pem
      - sed -i 's/\\n/\n/g' key.pem
      - grep -q "BEGIN RSA PRIVATE KEY" key.pem || sed -i '1i-----BEGIN RSA PRIVATE KEY-----' key.pem
      - grep -q "END RSA PRIVATE KEY" key.pem || echo "-----END RSA PRIVATE KEY-----" >> key.pem
      - chmod 400 key.pem
      - ls -lah key.pem
      - echo "Preview of key.pem (first 5 lines):"
      - head -n 5 key.pem
      - echo "Testing SSH connection..."
      - ssh -vvv -o StrictHostKeyChecking=no -i key.pem ubuntu@40.192.68.176 "echo Connected!"
      - echo "Recording pipeline start time..."
      - export PIPELINE_START_TIME=$(date +%s)

  build:
    commands:
      - echo "Building Job Management System..."
      - mkdir -p build/WEB-INF/classes
      - javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java") 2> compile_error.log || { echo "Build failed!"; exit 1; }
      - cp -R src/main/resources/* build/WEB-INF/classes/
      - cp -R src/main/webapp/* build/
      - jar -cvf JobManagement_CODEBUILD.war -C build . || { echo "WAR creation failed!"; exit 1; }
      - echo "Creating backup..."
      - mkdir -p /tmp/codebuild_backup
      - cp JobManagement_CODEBUILD.war /tmp/codebuild_backup/JobManagement_CODEBUILD.war_bak
      - echo "Running Unit Tests..."
      - mkdir -p test_output
      - javac -cp "src/main/webapp/WEB-INF/lib/*:src" -d test_output $(find src/main/test -name "*.java")
      - java -cp "test_output:src/main/webapp/WEB-INF/lib/*" org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log 2>&1 || true
      - echo "Unit tests completed. Preview of test results:"
      - head -n 20 test_results.log

  post_build:
    commands:
      - echo "Starting deployment process..."
      # Measure resource usage before deployment
      - echo "Measuring resource usage BEFORE deployment..."
      - vmstat 1 5 > resource_usage_before.log
      - free -h > mem_before.log

      # Deployment timing
      - export DEPLOY_START_TIME=$(date +%s)
      - export COMMIT_TIME=$(git log -1 --format=%ct)
      - export LEAD_TIME=$(expr $DEPLOY_START_TIME - $COMMIT_TIME)
      - echo "Lead Time for Changes - $LEAD_TIME seconds"

      # Deployment with rollback capability
      - |
        if ! scp -o StrictHostKeyChecking=no -i key.pem JobManagement_CODEBUILD.war ubuntu@40.192.68.176:/opt/tomcat10/webapps/; then
          echo "Deployment failed! Initiating rollback..."
          export ROLLBACK_START=$(date +%s)
          
          # Rollback with backup
          scp -o StrictHostKeyChecking=no -i key.pem /tmp/codebuild_backup/JobManagement_CODEBUILD.war_bak ubuntu@40.192.68.176:/opt/tomcat10/webapps/JobManagement_CODEBUILD.war
          
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@40.192.68.176 <<'EOF'
            sudo rm -rf /opt/tomcat10/webapps/JobManagement_CODEBUILD
            sleep 5
            sudo /opt/tomcat10/bin/shutdown.sh || true
            sudo /opt/tomcat10/bin/startup.sh
          EOF
          
          export ROLLBACK_END=$(date +%s)
          export ROLLBACK_DURATION=$((ROLLBACK_END - ROLLBACK_START))
          echo "Rollback completed in $ROLLBACK_DURATION seconds"
          export DEPLOY_STATUS="failed"
        else
          # Successful deployment
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@40.192.68.176 <<'EOF'
            sudo rm -rf /opt/tomcat10/webapps/JobManagement_CODEBUILD
            sleep 5
            sudo /opt/tomcat10/bin/shutdown.sh || true
            sudo /opt/tomcat10/bin/startup.sh
          EOF
          export DEPLOY_STATUS="success"
        fi

      # Wait for deployment to finish
      - echo "Waiting for deployment to finish..."
      - |
        tail -f /opt/tomcat10/logs/catalina.out | while read line; do
          echo "$line" | grep -q "Deployment of web application archive" && break
        done

      # Post-deployment metrics
      - export DEPLOY_END_TIME=$(date +%s)
      - export DEPLOY_DURATION=$(expr $DEPLOY_END_TIME - $DEPLOY_START_TIME)
      - echo "Measuring resource usage AFTER deployment..."
      - vmstat 1 5 > resource_usage_after.log
      - free -h > mem_after.log

      # Final timing calculations
      - export PIPELINE_END_TIME=$(date +%s)
      - export TOTAL_PIPELINE_TIME=$(expr $PIPELINE_END_TIME - $PIPELINE_START_TIME)

      # Metrics aggregation
      - |
        echo "-------------------------------------------------" > metrics_summary.log
        echo "              CI/CD Metrics Summary              " >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        echo "| Metric                             | Value          |" >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        printf "| %-35s | %-15s |\n" "Total Pipeline Time (sec)" "$TOTAL_PIPELINE_TIME" >> metrics_summary.log
        printf "| %-35s | %-15s |\n" "Deployment Time (sec)" "$DEPLOY_DURATION" >> metrics_summary.log
        printf "| %-35s | %-15s |\n" "Lead Time for Changes (sec)" "$LEAD_TIME" >> metrics_summary.log
        
        if [ "$DEPLOY_STATUS" = "failed" ]; then
          printf "| %-35s | %-15s |\n" "Rollback Time (sec)" "$ROLLBACK_DURATION" >> metrics_summary.log
        else
          printf "| %-35s | %-15s |\n" "Rollback Time (sec)" "N/A" >> metrics_summary.log
        fi

        TEST_SUMMARY=$(grep -i "tests found" test_results.log | head -n 1 || echo "N/A")
        printf "| %-35s | %-15s |\n" "Test Summary" "$TEST_SUMMARY" >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        
        # Add resource usage data
        echo "Memory Usage BEFORE:" >> metrics_summary.log
        cat mem_before.log >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        echo "Resource Usage BEFORE:" >> metrics_summary.log
        cat resource_usage_before.log >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        echo "Memory Usage AFTER:" >> metrics_summary.log
        cat mem_after.log >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log
        echo "Resource Usage AFTER:" >> metrics_summary.log
        cat resource_usage_after.log >> metrics_summary.log
        echo "-------------------------------------------------" >> metrics_summary.log

      # Display metrics
      - echo "Metrics Summary:"
      - cat metrics_summary.log

artifacts:
  files:
    - JobManagement_CODEBUILD.war
    - test_results.log
    - compile_error.log
    - metrics_summary.log
    - resource_usage_before.log
    - resource_usage_after.log
    - mem_before.log
    - mem_after.log