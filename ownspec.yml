version: 0.2

env:
  secrets-manager:
    NGROK_TOKEN: "arn:aws:secretsmanager:ap-south-2:581798224530:secret:NGROK_TOKEN-J969tR"

phases:
  install:
    runtime-versions:
      java: corretto17    # Change to corretto21 if desired and supported.
    commands:
      - echo "Updating packages and installing dependencies..."
      - apt-get update && apt-get install -y docker jq wget unzip
      - echo "Downloading Tomcat 9.0.73 from Apache Archive..."
      - wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz
      - echo "Extracting Tomcat..."
      - tar xzf apache-tomcat-9.0.73.tar.gz
      - mv apache-tomcat-9.0.73 /usr/local/tomcat
      # (Optional) Start Docker daemon if needed by any steps
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock > /dev/null 2>&1 &
      - timeout 15 sh -c "until docker info; do sleep 1; done"
      - echo "Installing ngrok..."
      - curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
      - echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | tee /etc/apt/sources.list.d/ngrok.list
      - apt-get update && apt-get install -y ngrok

  pre_build:
    commands:
      - echo "Initializing timing variables..."
      - export COMMIT_TIME=$(git log -1 --format=%ct 2>/dev/null || echo $(date +%s))
      - export PIPELINE_START=$(date +%s)

  build:
    commands:
      - echo "Compiling the application..."
      - mkdir -p build/WEB-INF/classes
      - echo "Generating classpath from JARs..."
      - export CP=$(echo src/main/webapp/WEB-INF/lib/*.jar | tr ' ' ':')
      - echo "Classpath - $CP"
      - echo "Compiling Java source files..."
      - find src -name '*.java' | xargs javac -cp "$CP" -d build/WEB-INF/classes
      - cp -R src/main/resources/* build/WEB-INF/classes/
      - cp -R src/main/webapp/* build/
      - echo "Packaging the WAR file..."
      - jar -cvf JobManagement.war -C build .
      - export BUILD_END=$(date +%s)
      - echo "Running tests..."
      - mkdir -p test_output
      - echo "Setting up test classpath..."
      - export TEST_CP=$(echo src/main/webapp/WEB-INF/lib/*.jar src | tr ' ' ':')
      - find src/main/test -name '*.java' | xargs javac -cp "$TEST_CP" -d test_output
      - java -cp test_output:"$CP" \
          org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log || true
      - export TESTS_END=$(date +%s)

  post_build:
    commands:
      - echo "Starting ngrok tunnel and Tomcat..."
      # Configure and start ngrok to tunnel port 8080
      - ngrok config add-authtoken $NGROK_TOKEN
      - ngrok http 8080 --log=stdout > ngrok.log &
      # Start Tomcat
      - echo "Starting Tomcat server..."
      - /usr/local/tomcat/bin/startup.sh || true
      - sleep 10
      # Retrieve the ngrok public URL
      - export PUBLIC_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
      - echo "Ngrok Public URL - $PUBLIC_URL"
      - if [ -z "$PUBLIC_URL" ]; then echo "ERROR - PUBLIC_URL is empty! Check ngrok logs."; exit 1; fi
      - mkdir -p /usr/local/tomcat/webapps
      # Deploy the WAR as ROOT.war so itâ€™s served at the root context
      - echo "Deploying WAR to Tomcat as ROOT.war..."
      - cp JobManagement.war /usr/local/tomcat/webapps/ROOT.war
      - echo "Waiting for Tomcat to deploy the application..."
      - timeout 300 bash -c 'until [ -d "/usr/local/tomcat/webapps/ROOT" ]; do echo "Waiting for deployment..."; sleep 5; done'
      - echo "Verifying local accessibility on port 8080..."
      - if curl -sSf http://localhost:8080/ >/dev/null; then echo "Local deployment verified!"; else echo "ERROR - Application not accessible on localhost:8080"; fi
      - echo "Dumping last 50 lines of catalina.out for troubleshooting:"
      - tail -n 50 /usr/local/tomcat/logs/catalina.out
      - export DEPLOY_END=$(date +%s)
      - |
        echo "Calculating timing metrics..."
        BUILD_DURATION=$(( BUILD_END - PIPELINE_START ))
        TEST_DURATION=$(( TESTS_END - BUILD_END ))
        DEPLOY_DURATION=$(( DEPLOY_END - PIPELINE_START ))
        LEAD_TIME=$(( DEPLOY_END - COMMIT_TIME ))
        TOTAL_TIME=$(( $(date +%s) - PIPELINE_START ))
        echo "Build Duration:    $BUILD_DURATION seconds"
        echo "Test Duration:     $TEST_DURATION seconds"
        echo "Deployment Duration: $DEPLOY_DURATION seconds"
        echo "Lead Time:         $LEAD_TIME seconds"
        echo "Total Time:        $TOTAL_TIME seconds"
      - echo "Fetching resource metrics..."
      - vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > vmstat.log
      - free -h > memory.log
      - ps -o %cpu,%mem,cmd > processes.log
      - echo "========================================================"
      - echo "Access your application at - $PUBLIC_URL/"
      - echo "This CodeBuild job will remain active until you manually stop it."
      - echo "========================================================"
      # Keep the container running so the public URL remains active.
      - while true; do sleep 60; done

artifacts:
  files:
    - JobManagement.war
    - test_results.log
    - ngrok.log
    - vmstat.log
    - memory.log
    - processes.log
