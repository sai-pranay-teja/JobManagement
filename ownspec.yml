version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing Docker..."
      - yum install -y docker jq
      # Start Docker daemon
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock > /dev/null 2>&1 &
      - timeout 15 sh -c "until docker info; do echo waiting for docker; sleep 1; done"
  pre_build:
    commands:
      - echo "Recording pipeline start time..."
      - export PIPELINE_START_TIME=$(date +%s)
  build:
    commands:
      - echo "Building Job Management System..."
      - mkdir -p build/WEB-INF/classes
      - javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java")
      - cp -R src/main/resources/* build/WEB-INF/classes/
      - cp -R src/main/webapp/* build/
      - jar -cvf JobManagement.war -C build .
      - echo "WAR file built:"
      - ls -lah JobManagement.war
      - echo "Running Unit Tests..."
      - mkdir -p test_output
      - javac -cp "src/main/webapp/WEB-INF/lib/*:src" -d test_output $(find src/main/test -name "*.java")
      - java -cp "test_output:src/main/webapp/WEB-INF/lib/*" org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log 2>&1 || true
      - echo "Unit test results preview:"
      - head -n 20 test_results.log
  post_build:
    commands:
      - echo "----- POST BUILD: Starting metrics collection & deployment -----"
      # Start Tomcat container (using Docker)
      - echo "Starting Tomcat container..."
      - docker run -d --name tomcat -p 8080:8080 tomcat:9-jdk17
      - echo "Waiting for Tomcat to initialize..."
      - sleep 15
      # Deploy WAR file into the Tomcat container
      - echo "Deploying WAR file into Tomcat container..."
      - docker cp JobManagement.war tomcat:/usr/local/tomcat/webapps/
      - echo "Waiting for deployment..."
      - sleep 20
      # Collect remote metrics from the container (human-readable)
      - echo "Collecting container metrics BEFORE deployment (if needed, not used here)..."
      # (In this example, we only collect AFTER deployment. Adjust as needed.)
      - echo "Collecting container metrics AFTER deployment..."
      - docker exec tomcat vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > resource_usage_after.log
      - docker exec tomcat free -h > mem_after.log
      # Record pipeline end time and calculate total pipeline time
      - echo "Recording pipeline end time..."
      - export PIPELINE_END_TIME=$(date +%s)
      - export TOTAL_PIPELINE_TIME=$(expr $PIPELINE_END_TIME - $PIPELINE_START_TIME)
      - echo "Total Pipeline Time - $TOTAL_PIPELINE_TIME seconds."
      # Aggregate and display metrics
      - echo "-------------------------------------------------" > metrics_summary.log
      - echo "              CI/CD Metrics Summary              " >> metrics_summary.log
      - echo "-------------------------------------------------" >> metrics_summary.log
      - echo "| Metric                             | Value          |" >> metrics_summary.log
      - echo "-------------------------------------------------" >> metrics_summary.log
      - printf "| %-35s | %-15s |\n" "Total Pipeline Time (sec)" "$TOTAL_PIPELINE_TIME" >> metrics_summary.log
      # In this example, Deployment Time and Lead Time are not separately measured because the container is local.
      - echo "-------------------------------------------------" >> metrics_summary.log
      - echo "Memory Usage AFTER (free -h):" >> metrics_summary.log
      - cat mem_after.log >> metrics_summary.log
      - echo "-------------------------------------------------" >> metrics_summary.log
      - echo "Resource Usage AFTER (vmstat):" >> metrics_summary.log
      - cat resource_usage_after.log >> metrics_summary.log
      - echo "-------------------------------------------------" >> metrics_summary.log
      - echo "Metrics Summary:" 
      - cat metrics_summary.log
      - echo "----- End of Metrics Display -----"
      # Clean up: stop and remove the container
      - echo "Stopping Tomcat container..."
      - docker stop tomcat
      - docker rm tomcat

artifacts:
  files:
    - JobManagement.war
    - test_results.log
    - metrics_summary.log
    - resource_usage_after.log
    - mem_after.log
