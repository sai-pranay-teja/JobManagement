version: 0.2

env:
  secrets-manager:
    NGROK_TOKEN: "arn:aws:secretsmanager:ap-south-2:581798224530:secret:NGROK_TOKEN-J969tR"

phases:
  install:
    runtime-versions:
      java: corretto17   # Change to corretto21 if you prefer and it's supported.
    commands:
      - echo "Installing dependencies and Tomcat..."
      - apt-get update
      - apt-get install -y docker jq wget unzip
      # Download and extract Tomcat from the Apache Archive
      - wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz
      - tar xzf apache-tomcat-9.0.73.tar.gz
      - mv apache-tomcat-9.0.73 /usr/local/tomcat
      # Start the Docker daemon if required by other commands (optional)
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock > /dev/null 2>&1 &
      - timeout 15 sh -c "until docker info; do sleep 1; done"
      # Install ngrok
      - curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
      - echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | tee /etc/apt/sources.list.d/ngrok.list
      - apt-get update && apt-get install -y ngrok
  pre_build:
    commands:
      - echo "Initializing timing..."
      - export COMMIT_TIME=$(git log -1 --format=%ct)
      - export PIPELINE_START=$(date +%s)
  build:
    commands:
      - echo "Building application..."
      - mkdir -p build/WEB-INF/classes
      - echo "Setting up classpath from JARs..."
      # Combine all JARs into a colon-separated list for javac:
      - export CP=$(echo src/main/webapp/WEB-INF/lib/*.jar | tr ' ' ':')
      - echo "Classpath - $CP"
      - echo "Compiling Java source files..."
      - find src -name '*.java' | xargs javac -cp "$CP" -d build/WEB-INF/classes
      - cp -R src/main/resources/* build/WEB-INF/classes/
      - cp -R src/main/webapp/* build/
      - jar -cvf JobManagement.war -C build .
      - export BUILD_END=$(date +%s)
      - echo "Running tests..."
      - mkdir -p test_output
      - echo "Setting up test classpath..."
      - export TEST_CP=$(echo src/main/webapp/WEB-INF/lib/*.jar src | tr ' ' ':')
      - find src/main/test -name '*.java' | xargs javac -cp "$TEST_CP" -d test_output
      - |
        java -cp test_output:"$CP" \
            org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log || true
      - export TESTS_END=$(date +%s)
  post_build:
    commands:
    - echo "Starting Tomcat and ngrok..."
    # Configure and start ngrok to tunnel port 8080
    - ngrok config add-authtoken $NGROK_TOKEN
    - ngrok http 8080 --log=stdout > ngrok.log &
    # Start Tomcat
    - echo "Starting Tomcat..."
    - /usr/local/tomcat/bin/startup.sh || true
    - export SERVICES_START=$(date +%s)
    - echo "Waiting for Tomcat to start..."
    - sleep 10
    - echo "Waiting for ngrok to initialize..."
    - sleep 10
    - echo "Querying ngrok tunnels..."
    - export PUBLIC_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
    - echo "Public URL retrieved - $PUBLIC_URL"
    - if [ -z "${PUBLIC_URL}" ]; then echo "ERROR - PUBLIC_URL is empty! Check ngrok logs."; exit 1; fi
    - export DEPLOY_START=$(date +%s)
    # Ensure the Tomcat webapps directory exists and deploy the WAR.
    - echo "Creating Tomcat webapps directory..."
    - mkdir -p /usr/local/tomcat/webapps
    - echo "Deploying WAR to Tomcat..."
    - cp JobManagement.war /usr/local/tomcat/webapps/
    # Wait for Tomcat to explode the WAR (checking for the deployed directory)
    - echo "Waiting for application deployment..."
    - timeout 300 bash -c 'until [ -d "/usr/local/tomcat/webapps/JobManagement" ]; do echo "Waiting for Tomcat to deploy WAR..."; sleep 5; done'
    - echo "Application should be deployed. Verifying locally..."
    - if curl -sSf http://localhost:8080/JobManagement/ >/dev/null; then echo "Local deployment verified!"; else echo "ERROR - Application not accessible locally on port 8080."; fi
    - echo "Dumping last 50 lines of catalina.out for reference:"
    - tail -n 50 /usr/local/tomcat/logs/catalina.out
    - export DEPLOY_END=$(date +%s)
    - echo "Calculating metrics..."
    - |
      BUILD_DURATION=$(( BUILD_END - PIPELINE_START ))
      TEST_DURATION=$(( TESTS_END - BUILD_END ))
      DEPLOY_DURATION=$(( DEPLOY_END - DEPLOY_START ))
      LEAD_TIME=$(( DEPLOY_START - COMMIT_TIME ))
      TOTAL_TIME=$(( $(date +%s) - PIPELINE_START ))
      echo "Build Duration:    $BUILD_DURATION seconds"
      echo "Test Duration:     $TEST_DURATION seconds"
      echo "Deploy Duration:   $DEPLOY_DURATION seconds"
      echo "Lead Time:         $LEAD_TIME seconds"
      echo "Total Time:        $TOTAL_TIME seconds"
    - echo "Fetching resource metrics..."
    - vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > vmstat.log
    - free -h > memory.log
    - ps -o %cpu,%mem,cmd > processes.log
    - echo ""
    - echo "==== CI/CD Metrics Report ===="
    - echo "Public URL - $PUBLIC_URL/JobManagement/"
    - echo "Job will remain active until you stop it."
    - echo "To stop and clean up, run:"
    - echo "  docker stop tomcat && docker rm tomcat"
    - echo "  pkill -f ngrok"
    - echo "Entering persistent hold mode. To exit, stop the build manually."
    - while true; do sleep 60; done

artifacts:
  files:
    - JobManagement.war
    - test_results.log
    - vmstat.log
    - memory.log
    - processes.log
    - ngrok.log
