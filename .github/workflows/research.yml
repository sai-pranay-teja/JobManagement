name: CI/CD Pipeline with Manual Control

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Install Dependencies
        run: |
          # Install Tomcat
          sudo mkdir -p /opt/tomcat
          sudo chown $USER:$USER /opt/tomcat
          wget -q https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz
          tar -xzf apache-tomcat-10.0.27.tar.gz
          mv apache-tomcat-10.0.27/* /opt/tomcat/
          chmod +x /opt/tomcat/bin/*.sh

          # Install ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: Configure ngrok
        run: |
          if [ -z "${{ secrets.NGROK_TOKEN }}" ]; then
            echo "::error::Missing NGROK_TOKEN secret!"
            exit 1
          fi
          ngrok config add-authtoken "${{ secrets.NGROK_TOKEN }}"
          echo "âœ” ngrok authentication configured"

      - name: Record pipeline start time
        run: echo "PIPELINE_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Build WAR file
        run: |
          mkdir -p build/WEB-INF/classes
          javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java")
          cp -R src/main/resources/* build/WEB-INF/classes/
          cp -R src/main/webapp/* build/
          jar -cvf JobManagement.war -C build .

      - name: Run Unit Tests
        run: |
          mkdir -p test_output
          javac -cp "src/main/webapp/WEB-INF/lib/*:src" -d test_output $(find src/main/test -name "*.java")
          java -cp "test_output:src/main/webapp/WEB-INF/lib/*" org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log || true
          head -n 20 test_results.log

      - name: Start Services
        run: |
          /opt/tomcat/bin/startup.sh
          ngrok http 8080 --log=stdout > ngrok.log &
          echo "Tomcat and ngrok services started"

      - name: Get Public URL
        run: |
          sleep 5  # Wait for ngrok initialization
          NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "Public Application URL: $NGROK_URL/JobManagement/"

      - name: Deploy WAR
        run: |
          cp JobManagement.war /opt/tomcat/webapps/
          timeout 60 bash -c 'while [ ! -f /opt/tomcat/webapps/JobManagement.war ]; do sleep 1; done'

      - name: Verify Deployment
        run: |
          for i in {1..30}; do
            if curl -sSf ${{ env.PUBLIC_URL }}/JobManagement/ >/dev/null; then
              echo "Application verified as accessible"
              exit 0
            fi
            sleep 2
          done
          echo "::error::Deployment verification failed"
          exit 1

      - name: Display Deployment Info
        run: |
          echo "############################################################"
          echo "#  Public Application URL: ${{ env.PUBLIC_URL }}/JobManagement/  #"
          echo "#                                                          #"
          echo "#  This workflow will stay active until manually stopped!  #"
          echo "#  Click 'Cancel workflow' above when finished testing      #"
          echo "############################################################"

      - name: Keep Alive
        run: |
          echo "Job will remain active until manually cancelled..."
          while true; do
            sleep 300
            echo "[$(date +%H:%M:%S)] Job still active - visit ${{ env.PUBLIC_URL }}"
            echo "Click 'Cancel workflow' in the top right to stop"
          done

      - name: Cleanup
        if: always()
        run: |
          echo "=== Starting Cleanup Process ==="
          /opt/tomcat/bin/shutdown.sh || true
          pkill -f tomcat || true
          pkill -f ngrok || true
          rm -rf /opt/tomcat*
          echo "=== Cleanup Completed ==="