name: CI/CD Pipeline with Manual Control

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Install Dependencies
        run: |
          sudo mkdir -p /opt/tomcat
          sudo chown $USER:$USER /opt/tomcat
          wget -q https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz
          tar -xzf apache-tomcat-10.0.27.tar.gz
          mv apache-tomcat-10.0.27/* /opt/tomcat/
          chmod +x /opt/tomcat/bin/*.sh

          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

      - name: Configure ngrok
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          echo "ngrok configured successfully"

      - name: Record pipeline start time
        run: echo "PIPELINE_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Build WAR file
        run: |
          mkdir -p build/WEB-INF/classes
          javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java")
          cp -R src/main/resources/* build/WEB-INF/classes/
          cp -R src/main/webapp/* build/
          jar -cvf JobManagement.war -C build .

      - name: Run Unit Tests
        run: |
          mkdir -p test_output
          javac -cp "src/main/webapp/WEB-INF/lib/*:src" -d test_output $(find src/main/test -name "*.java")
          java -cp "test_output:src/main/webapp/WEB-INF/lib/*" org.junit.platform.console.ConsoleLauncher --scan-class-path test_output --details summary > test_results.log || true
          head -n 20 test_results.log

      - name: Start Services
        run: |
          /opt/tomcat/bin/startup.sh
          ngrok http 8080 --log=stdout > ngrok.log &
          echo "Services started"

      - name: Get Public URL
        run: |
          sleep 5
          NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "Public URL: $NGROK_URL"

      - name: Deploy WAR
        run: |
          cp JobManagement.war /opt/tomcat/webapps/
          timeout 60 bash -c 'while [ ! -f /opt/tomcat/webapps/JobManagement.war ]; do sleep 1; done'

      - name: Record deployment start time
        run: |
          echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV
          COMMIT_TIME=$(git log -1 --format=%ct)
          LEAD_TIME=$(($(date +%s) - COMMIT_TIME))
          echo "LEAD_TIME=$LEAD_TIME" >> $GITHUB_ENV

      - name: Verify Deployment
        run: |
          for i in {1..30}; do
            if curl -sSf $PUBLIC_URL/JobManagement/ >/dev/null; then
              echo "Application ready"
              exit 0
            fi
            sleep 2
          done
          echo "Verification failed" && exit 1

      - name: Record metrics
        run: |
          echo "DEPLOY_END_TIME=$(date +%s)" >> $GITHUB_ENV
          vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > resource_usage.log
          free -h > mem.log

      - name: Display Info
        run: |
          echo "###########################################################"
          echo "#  Application URL: $PUBLIC_URL/JobManagement/ #"
          echo "#                                                         #"
          echo "#  To stop the application and end the job:               #"
          echo "#  1. Click the 'Cancel workflow' button above            #"
          echo "#  2. Wait for cleanup to complete (~30 seconds)          #"
          echo "###########################################################"

          DEPLOY_DURATION=$(($DEPLOY_END_TIME - $DEPLOY_START_TIME))
          PIPELINE_END_TIME=$(date +%s)
          TOTAL_PIPELINE_TIME=$(($PIPELINE_END_TIME - $PIPELINE_START_TIME))

          echo "-------------------------------------------------"
          echo "| Metric                  | Value               |"
          echo "-------------------------------------------------"
          printf "| %-22s | %-18s |\n" "Lead Time" "${LEAD_TIME}s"
          printf "| %-22s | %-18s |\n" "Deployment Time" "${DEPLOY_DURATION}s"
          printf "| %-22s | %-18s |\n" "Total Time" "${TOTAL_PIPELINE_TIME}s"
          echo "-------------------------------------------------"

      - name: Keep Alive
        run: |
          echo "Job will remain active until manually cancelled..."
          while true; do 
            sleep 300
            echo "[$(date +%H:%M:%S)] Job still active - click 'Cancel workflow' to stop"
          done

      - name: Cleanup
        if: always()
        run: |
          echo "Starting cleanup process..."
          /opt/tomcat/bin/shutdown.sh || true
          pkill -f tomcat || true
          pkill -f ngrok || true
          rm -rf /opt/tomcat*
          echo "Cleanup completed successfully"