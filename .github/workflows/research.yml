name: Full CI/CD Pipeline with Metrics & External Access

on:
  push:
    branches: [ main ]

jobs:
  build-deploy-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Initialize Timing
        run: |
          echo "COMMIT_TIME=$(git log -1 --format=%ct)" >> $GITHUB_ENV
          echo "PIPELINE_START=$(date +%s)" >> $GITHUB_ENV

      - name: Install Tomcat & ngrok
        run: |
          sudo mkdir -p /opt/tomcat
          sudo chown $USER:$USER /opt/tomcat
          wget -q https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz
          tar -xzf apache-tomcat-10.0.27.tar.gz
          mv apache-tomcat-10.0.27/* /opt/tomcat/
          chmod +x /opt/tomcat/bin/*.sh

          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: Configure ngrok
        run: |
          if [ -z "${{ secrets.NGROK_TOKEN }}" ]; then
            echo "::error::Missing NGROK_TOKEN in secrets!"
            exit 1
          fi
          ngrok config add-authtoken "${{ secrets.NGROK_TOKEN }}"
          echo "ngrok authenticated successfully"

      - name: Build Application
        run: |
          mkdir -p build/WEB-INF/classes
          javac -cp "src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java")
          cp -R src/main/resources/* build/WEB-INF/classes/
          cp -R src/main/webapp/* build/
          jar -cvf JobManagement.war -C build .
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV

      - name: Run Tests
        run: |
          mkdir -p test_output
          javac -cp "src/main/webapp/WEB-INF/lib/*:src" -d test_output $(find src/main/test -name "*.java")
          java -cp "test_output:src/main/webapp/WEB-INF/lib/*" org.junit.platform.console.ConsoleLauncher \
            --scan-class-path test_output \
            --details summary > test_results.log || true
          echo "TESTS_END=$(date +%s)" >> $GITHUB_ENV

      - name: Start Services
        run: |
          /opt/tomcat/bin/startup.sh
          ngrok http 8080 --log=stdout > ngrok.log &
          echo "SERVICES_START=$(date +%s)" >> $GITHUB_ENV

      - name: Get Public URL
        run: |
          sleep 5  # Wait for ngrok initialization
          NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "DEPLOY_START=$(date +%s)" >> $GITHUB_ENV

      - name: Deploy Application
        run: |
          cp JobManagement.war /opt/tomcat/webapps/
          timeout 60 bash -c 'while [ ! -f /opt/tomcat/webapps/JobManagement.war ]; do sleep 1; done'

      - name: Verify Deployment
        run: |
          for i in {1..30}; do
            if curl -sSf ${{ env.PUBLIC_URL }}/JobManagement/ >/dev/null; then
              echo "DEPLOY_END=$(date +%s)" >> $GITHUB_ENV
              exit 0
            fi
            sleep 2
          done
          echo "::error::Deployment verification failed"
          exit 1

      - name: Capture Metrics
        run: |
          # Timing Calculations
          BUILD_DURATION=$(( $BUILD_END - $PIPELINE_START ))
          TEST_DURATION=$(( $TESTS_END - $BUILD_END ))
          DEPLOY_DURATION=$(( $DEPLOY_END - $DEPLOY_START ))
          LEAD_TIME=$(( $DEPLOY_START - $COMMIT_TIME ))
          TOTAL_TIME=$(( $(date +%s) - $PIPELINE_START ))

          # Resource Metrics
          vmstat -s | awk '{printf "%.2f MB - %s\n", $1/1024, substr($0, index($0,$2))}' > vmstat.log
          free -h > memory.log
          ps -o %cpu,%mem,cmd > processes.log

          echo "METRICS<<EOF" >> $GITHUB_OUTPUT
          echo "CI/CD Metrics Report" >> $GITHUB_OUTPUT
          echo "=====================" >> $GITHUB_OUTPUT
          echo "Build Duration:    $BUILD_DURATION seconds" >> $GITHUB_OUTPUT
          echo "Test Duration:     $TEST_DURATION seconds" >> $GITHUB_OUTPUT
          echo "Deploy Duration:   $DEPLOY_DURATION seconds" >> $GITHUB_OUTPUT
          echo "Lead Time:         $LEAD_TIME seconds" >> $GITHUB_OUTPUT
          echo "Total Time:        $TOTAL_TIME seconds" >> $GITHUB_OUTPUT
          echo -e "\nMemory Usage:\n$(cat memory.log)" >> $GITHUB_OUTPUT
          echo -e "\nSystem Resources:\n$(cat vmstat.log)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Display Metrics
        run: |
          echo "${{ steps.Capture-Metrics.outputs.METRICS }}"
          echo "Public URL: ${{ env.PUBLIC_URL }}/JobManagement/"
          echo "Job will remain active until cancelled..."

      - name: Keep Active
        run: |
          while true; do
            sleep 300
            echo "[$(date +%H:%M:%S)] System still active"
            echo "Public URL: ${{ env.PUBLIC_URL }}/JobManagement/"
            echo "Runtime: $(($(date +%s) - $PIPELINE_START)) seconds"
          done

      - name: Cleanup
        if: always()
        run: |
          echo "Initiating cleanup..."
          /opt/tomcat/bin/shutdown.sh || true
          pkill -f tomcat || true
          pkill -f ngrok || true
          rm -rf /opt/tomcat*
          echo "Cleanup completed after $(($(date +%s) - $PIPELINE_START)) seconds"