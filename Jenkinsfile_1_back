pipeline {
    agent any

    environment {
        TOMCAT_HOME = "/opt/tomcat10"
        WAR_NAME = "JobManagement.war"
        DEPLOY_DIR = "${TOMCAT_HOME}/webapps"
        WAR_STORAGE = "/home/ubuntu"  // Store WAR before deploying
        LOG_FILE = "/var/log/jenkins/deployment_status.log"
        RESOURCE_LOG = "/var/log/jenkins/resource_usage.log"
        DEPLOYMENT_TIME_FILE = "/var/log/jenkins/deployment_times.csv"
        ROLLBACK_LOG = "/var/log/jenkins/rollback_time.log"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/sai-pranay-teja/JobManagement.git', branch: 'main'
            }
        }
        
        stage('Compile') {
            steps {
                sh 'mkdir -p build/WEB-INF/classes'
                sh '''
                   javac -cp "${WORKSPACE}/src/main/webapp/WEB-INF/lib/*" -d build/WEB-INF/classes $(find src -name "*.java")
                   '''
            }
        }

        stage('Copy Resources') {
            steps {
                sh 'cp -R src/main/resources/* build/WEB-INF/classes/'
                sh 'cp -R src/main/webapp/* build/'
            }
        }

        stage('Package WAR') {
            steps {
                sh 'jar -cvf ${WAR_NAME} -C build .'
                sh 'sudo mv ${WAR_NAME} ${WAR_STORAGE}/'  // Save WAR in /home/ubuntu
                archiveArtifacts artifacts: "${WAR_STORAGE}/${WAR_NAME}", allowEmptyArchive: true, fingerprint: true
            }
        }

        stage('Measure Resource Usage Before Deployment') {
            steps {
                sh "echo 'Resource usage before deployment:' >> ${RESOURCE_LOG}"
                sh "vmstat 1 5 >> ${RESOURCE_LOG}"
            }
        }

        stage('Deploy and Measure Time') {
            steps {
                script {
                    def start_time = sh(script: "date +%s", returnStdout: true).trim()

                    sh """
                        echo "Starting deployment at \$(date)" >> ${LOG_FILE}
                        sudo mv ${WAR_STORAGE}/${WAR_NAME} ${DEPLOY_DIR}/ 
                        sudo ${TOMCAT_HOME}/bin/shutdown.sh
                        sudo ${TOMCAT_HOME}/bin/startup.sh

                        # Wait until deployment completes
                        tail -f ${TOMCAT_HOME}/logs/catalina.out | while read line; do
                          echo "\${line}" | grep -q "Deployment of web application archive" && break
                        done
                    """

                    def end_time = sh(script: "date +%s", returnStdout: true).trim()
                    def deploy_time = end_time.toInteger() - start_time.toInteger()

                    sh "echo \"Deployment took ${deploy_time} seconds.\" >> ${DEPLOYMENT_TIME_FILE}"
                    echo "Deployment completed in ${deploy_time} seconds."
                }
            }
        }

        stage('Measure Resource Usage After Deployment') {
            steps {
                sh "echo 'Resource usage after deployment:' >> ${RESOURCE_LOG}"
                sh "vmstat 1 5 >> ${RESOURCE_LOG}"
            }
        }

        stage('Rollback on Failure') {
            when {
                failure()
            }
            steps {
                script {
                    def start_time = sh(script: "date +%s", returnStdout: true).trim()

                    sh """
                        echo "Starting rollback at \$(date)" >> ${ROLLBACK_LOG}
                        sudo rm -rf ${DEPLOY_DIR}/${WAR_NAME}
                        sudo cp ${WAR_STORAGE}/${WAR_NAME}.backup ${DEPLOY_DIR}/
                        sudo ${TOMCAT_HOME}/bin/shutdown.sh
                        sudo ${TOMCAT_HOME}/bin/startup.sh
                    """

                    def end_time = sh(script: "date +%s", returnStdout: true).trim()
                    def rollback_time = end_time.toInteger() - start_time.toInteger()

                    sh "echo \"Rollback took ${rollback_time} seconds.\" >> ${ROLLBACK_LOG}"
                    echo "Rollback completed in ${rollback_time} seconds."
                }
            }
        }
    }

    post {
        failure {
            echo 'Build or deployment failed.'
            sh "echo 'Deployment failed at $(date)' >> ${LOG_FILE}"
        }
        success {
            echo 'Build and deployment succeeded.'
            sh "echo 'Deployment succeeded at $(date)' >> ${LOG_FILE}"
        }
    }
}
